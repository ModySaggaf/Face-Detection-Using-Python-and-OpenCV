import cv2

# Load the cascade
face_cascade = cv2.CascadeClassifier('C:/Users/acer/Downloads/haarcascade_frontalface_default.xml')
smile_cascade = cv2.CascadeClassifier('C:/Users/acer/Downloads/haarcascade_smile.xml')
eye_cascade = cv2.CascadeClassifier('C:/Users/acer/Downloads/haarcascade_eye.xml')

# Create window with freedom of dimensions
cv2.namedWindow("Face Detection Result", cv2.WINDOW_NORMAL)
# Resize window to specified dimensions
#cv2.resizeWindow("Face Detection Result", 400, 300)

# Read the input image
img = cv2.imread('C:/Users/acer/Downloads/KAUST Internship.jpeg')
# Convert into grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
# Detect faces
faces = face_cascade.detectMultiScale(gray, 1.23, 4)
# Draw rectangle around the faces, eyes and smiles
for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)

    roi_gray = gray[y:y+h, x:x+w]
    roi_color = img[y:y+h, x:x+w]

    eyes = eye_cascade.detectMultiScale(roi_gray)
    for (ex,ey,ew,eh) in eyes:
        cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)

    smile = smile_cascade.detectMultiScale(roi_gray, 1.2, 20)
    for (sx, sy, sw, sh) in smile:
        cv2.rectangle(roi_color,(sx, sy), ((sx + sw), (sy + sh)), (0, 0, 255), 2)

# Display the output
cv2.imshow('Face Detection Result', img)
cv2.waitKey(0)
cv2.destroyAllWindows()
